
(setq produtosLista '((agua 2.00) (sabao 1.00) (arroz 3.00)))
(setq valorTotal 0)

(defun buscaItemProdutos(item)
    (setq result (find item produtosLista :test #'subsetp))
    (if result result "Produto não encontrado")
    )

;(print (buscaItemProdutos '(sabao)))

(defun listarProdutos()
	(setq listaOrdenada (sort produtosLista #'string-lessp :key #'car))
	(setq i 0)
	(loop for (a b) in listaOrdenada
            do (format t "Nome do produto: ~a; Preço: ~a~%" a b)
			(if (= i 2) (paginacao) )
			)
)

(defun paginacao()
	(terpri) 
	(print "selecione opção desejada")
	(setq optP (read))
	;(if (= optP 1) )
)

(defun solicitaProduto() 
	(terpri) 
	(princ "Nome do produto : ") 
	(setq nomeProduto (read))
	(princ "Quantidade do produto: ") 
	(setq quantidadeProduto (read)) 
	(print quantidadeProduto)
	(setq list '())
	(push nomeProduto list)
	(setq produto (buscaItemProdutos list))
	(print "#########")
	(print produto)
	(print "#########")
	(setq vlP (cdr produto))
	(print "@@@@@@@@@")
	(setq valorParcial (* (pop vlP) quantidadeProduto))
	(setq valorTotal (+ valorTotal valorParcial))
	(print "valor parcial")
	(print valorParcial)
	(print "valor total")
	(print valorTotal)
	(print "@@@@@@@@@")
	;(print (concatenate 'string produto (write-to-string (cdr produto)) ))
)


(defun menuCompras()
	(terpri)
	(print "Tecle 1 para compras")
	(print "Tecle 2 para sair")
	(print "Digite opção desejada: ")
	(setq opcao (read))
	(compras opcao)
)


(defun compras(opcao)
	(print (if (= opcao 1) (efetuarCompras) "operação finalizada" ))
)

(defun efetuarCompras()
	(print "efetuando compras")
	(solicitaProduto)
	(print "tecle 1 para continuar ou tecle 2 para sair")
	(setq op (read))
	(compras op)
)
